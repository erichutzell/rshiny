# Unload packages ####
pacman::p_unload(all)
# Load Shiny ####
pacman::p_load(shiny)
# Load Shiny ####
pacman::p_load(shiny,shinythemes)
runApp('Shiny_App_Code.R')
runApp('Shiny_App_Code.R')
runApp('Shiny_App_Code.R')
runApp('Shiny_App_Code.R')
# Define UI for app that draws a histogram ####
ui <- fluidPage(
# App title ----
titlePanel("Ozone level!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
View(ui)
View(ui)
pacman::p_load(shiny)
data(airquality)
# Define UI for app that draws a histogram ####
ui <- fluidPage(
# App title ----
titlePanel("Ozone level!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- airquality$Ozone
x    <- na.omit(x)
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "black",
xlab = "Ozone level",
main = "Histogram of Ozone level")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('Second_App_Shiny_Example.R')
runApp('Second_App_Shiny_Example.R')
runApp('Second_App_Shiny_Example.R')
runApp('Second_App_Shiny_Example.R')
runApp('Second_App_Shiny_Example.R')
runApp('Second_App_Shiny_Example.R')
pacman::p_load(shiny,shinythemes,data.table,RCurl,randomForest)
runApp('Weather_App.R')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
runApp('Weather_App.R')
View(weather)
View(weather)
runApp('Weather_App.R')
runApp('Weather_App.R')
runApp('Weather_App_1.R')
runApp('Iris_app-numeric.R')
runApp('Iris_app-numeric.R')
runApp('Iris_app-numeric.R')
runApp('Iris_app-numeric.R')
runApp('Iris_app-numeric.R')
pacman::p_load(RCurl,randomForest,caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
runApp('Iris_app-numeric.R')
############################################
# Data Professor                           #
# http://youtube.com/dataprofessor         #
# http://github.com/dataprofessor          #
# http://facebook.com/dataprofessor        #
# https://www.instagram.com/data.professor #
############################################
# Import libraries
pacman::p_load(shiny,data.table,randomForest)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
runApp('Iris_app-slider.R')
pacman::p_load(shiny,shinythemes)
setwd("D:/Courses/R/Shiny_Course/Shiny_Web_Application/BMI")
runApp('BMI_app.R')
runApp('BMI_app.R')
runApp('BMI_app.R')
